<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard | STEMSphere Academy</title>
  
  <link rel="icon" type="image/png" sizes="32x32" href="https://learn.stemsphere.academy/assets/favconsp1.2.png">
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <style>
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #f5f5f5;
      color: #000;
      min-height: 100vh;
    }
    
    header {
      background: #fff;
      padding: 1rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 3px solid #ff0000;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .brand {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .brand img {
      width: 40px;
      height: 40px;
    }
    .brand-text {
      font-size: 1.2em;
      font-weight: 700;
      color: #000;
    }
    .admin-badge {
      background: #ff0000;
      color: #fff;
      padding: 0.3rem 0.8rem;
      border-radius: 20px;
      font-size: 0.8em;
      font-weight: 600;
      margin-left: 0.5rem;
    }
    .logout-btn {
      background: #ff0000;
      color: #fff;
      border: none;
      padding: 0.6rem 1.2rem;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 600;
    }

    .admin-container {
      max-width: 1400px;
      margin: 2rem auto;
      padding: 0 1rem;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }
    .stat-card {
      background: #fff;
      padding: 1.5rem;
      border-radius: 8px;
      border-left: 4px solid #ff0000;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .stat-card h3 {
      font-size: 0.9em;
      color: #666;
      margin-bottom: 0.5rem;
    }
    .stat-card .number {
      font-size: 2em;
      font-weight: 700;
      color: #ff0000;
    }

    .tabs {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 2rem;
      border-bottom: 2px solid #ddd;
      flex-wrap: wrap;
    }
    .tab {
      padding: 1rem 2rem;
      background: none;
      border: none;
      border-bottom: 3px solid transparent;
      cursor: pointer;
      font-weight: 600;
      font-size: 1em;
      color: #666;
    }
    .tab.active {
      color: #ff0000;
      border-bottom-color: #ff0000;
    }

    .tab-content {
      display: none;
    }
    .tab-content.active {
      display: block;
    }

    .data-table {
      background: #fff;
      border-radius: 8px;
      overflow-x: auto;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    table {
      width: 100%;
      border-collapse: collapse;
      min-width: 800px;
    }
    th {
      background: #f8f8f8;
      padding: 1rem;
      text-align: left;
      font-weight: 600;
      border-bottom: 2px solid #ddd;
    }
    td {
      padding: 1rem;
      border-bottom: 1px solid #eee;
    }

    .btn-small {
      padding: 0.4rem 0.8rem;
      border-radius: 4px;
      border: none;
      cursor: pointer;
      font-size: 0.85em;
      font-weight: 600;
      margin: 0.2rem;
    }
    .btn-assign {
      background: #007bff;
      color: #fff;
    }
    .btn-complete {
      background: #28a745;
      color: #fff;
    }

    .status-badge {
      padding: 0.3rem 0.8rem;
      border-radius: 20px;
      font-size: 0.85em;
      font-weight: 600;
    }
    .status-scheduled {
      background: rgba(0,200,0,0.2);
      color: #008800;
    }
    .status-completed {
      background: rgba(128,128,128,0.2);
      color: #666;
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      z-index: 1000;
      justify-content: center;
      align-items: center;
    }
    .modal.active {
      display: flex;
    }
    .modal-content {
      background: #fff;
      padding: 2rem;
      border-radius: 8px;
      max-width: 500px;
      width: 90%;
    }
    .form-group {
      margin-bottom: 1rem;
    }
    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 600;
    }
    .form-group input,
    .form-group select {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid #ddd;
      border-radius: 6px;
    }
    .btn-primary {
      background: #ff0000;
      color: #fff;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 600;
      margin-right: 0.5rem;
    }
    .btn-secondary {
      background: #6c757d;
      color: #fff;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 600;
    }

    .loading {
      text-align: center;
      padding: 3rem;
      color: #666;
    }
    .empty-state {
      text-align: center;
      padding: 3rem;
      color: #999;
    }
  </style>
</head>
<body>
  <header>
    <div class="brand">
      <img src="https://learn.stemsphere.academy/assets/favconsp1.2.png" alt="STEMSphere Academy">
      <span class="brand-text">STEMSphere Academy</span>
      <span class="admin-badge">ADMIN</span>
    </div>
    <button class="logout-btn" onclick="logout()">Logout</button>
  </header>

  <div class="admin-container">
    <div class="stats-grid">
      <div class="stat-card">
        <h3>Total Students</h3>
        <div class="number" id="totalStudents">-</div>
      </div>
      <div class="stat-card">
        <h3>Total Bookings</h3>
        <div class="number" id="totalBookings">-</div>
      </div>
      <div class="stat-card">
        <h3>Pending Sessions</h3>
        <div class="number" id="pendingSessions">-</div>
      </div>
      <div class="stat-card">
        <h3>Teachers</h3>
        <div class="number" id="totalTeachers">-</div>
      </div>
    </div>

    <div class="tabs">
      <button class="tab active" onclick="showTab('bookings')">All Bookings</button>
      <button class="tab" onclick="showTab('students')">Students</button>
      <button class="tab" onclick="showTab('teachers')">Teachers</button>
    </div>

    <div id="bookingsTab" class="tab-content active">
      <div class="data-table">
        <table>
          <thead>
            <tr>
              <th>Student</th>
              <th>Subject</th>
              <th>Date</th>
              <th>Time</th>
              <th>Instructor</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="bookingsBody">
            <tr><td colspan="7" class="loading">Loading bookings...</td></tr>
          </tbody>
        </table>
      </div>
    </div>

    <div id="studentsTab" class="tab-content">
      <div class="data-table">
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Age Group</th>
              <th>Total Sessions</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="studentsBody">
            <tr><td colspan="6" class="loading">Loading students...</td></tr>
          </tbody>
        </table>
      </div>
    </div>

    <div id="teachersTab" class="tab-content">
      <button class="btn-primary" onclick="showAddTeacherModal()" style="margin-bottom:1rem;">+ Add Teacher</button>
      <div class="data-table">
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Students</th>
            </tr>
          </thead>
          <tbody id="teachersBody">
            <tr><td colspan="4" class="loading">Loading teachers...</td></tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Assign Teacher Modal -->
  <div id="assignTeacherModal" class="modal">
    <div class="modal-content">
      <h2>Assign Teacher</h2>
      <div class="form-group">
        <label>Select Teacher</label>
        <select id="teacherSelect">
          <option value="">Loading...</option>
        </select>
      </div>
      <div>
        <button class="btn-primary" onclick="assignTeacher()">Assign</button>
        <button class="btn-secondary" onclick="closeModal('assignTeacherModal')">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Add Teacher Modal -->
  <div id="addTeacherModal" class="modal">
    <div class="modal-content">
      <h2>Add New Teacher</h2>
      <div class="form-group">
        <label>Full Name</label>
        <input type="text" id="teacherName" required>
      </div>
      <div class="form-group">
        <label>Email</label>
        <input type="email" id="teacherEmail" required>
      </div>
      <div class="form-group">
        <label>Phone</label>
        <input type="tel" id="teacherPhone">
      </div>
      <div class="form-group">
        <label>Temporary Password</label>
        <input type="password" id="teacherPassword" required minlength="6">
      </div>
      <div>
        <button class="btn-primary" onclick="addTeacher()">Add Teacher</button>
        <button class="btn-secondary" onclick="closeModal('addTeacherModal')">Cancel</button>
      </div>
    </div>
  </div>

  <script>
    const SUPABASE_URL = 'https://horqtcwnhwgodwlyqhli.supabase.co';
    const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhvcnF0Y3duaHdnb2R3bHlxaGxpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk3NjAyNzEsImV4cCI6MjA3NTMzNjI3MX0.4rYzW6MFEkVVqLor55RuFGLwE6WBJrYLxvYbgeXXRGU';
    
    const { createClient } = supabase;
    const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);

    let currentBookingId = null;
    let currentStudentId = null;
    let allTeachers = [];

    async function checkAdminAuth() {
      const { data: { session } } = await supabaseClient.auth.getSession();
      
      if (!session) {
        window.location.href = 'admin-login.html';
        return;
      }

      const { data: profile } = await supabaseClient
        .from('profiles')
        .select('role')
        .eq('id', session.user.id)
        .single();

      if (!profile || profile.role !== 'admin') {
        alert('Access denied. Admin only.');
        window.location.href = 'admin-login.html';
        return;
      }

      loadStats();
      loadBookings();
      loadStudents();
      loadTeachers();
    }

    async function loadStats() {
      const { data: students } = await supabaseClient
        .from('profiles')
        .select('id')
        .eq('role', 'student');

      const { data: bookings } = await supabaseClient
        .from('bookings')
        .select('id, status');

      const { data: teachers } = await supabaseClient
        .from('profiles')
        .select('id')
        .eq('role', 'teacher');

      document.getElementById('totalStudents').textContent = students?.length || 0;
      document.getElementById('totalBookings').textContent = bookings?.length || 0;
      document.getElementById('pendingSessions').textContent = 
        bookings?.filter(b => b.status === 'scheduled').length || 0;
      document.getElementById('totalTeachers').textContent = teachers?.length || 0;
    }

    async function loadBookings() {
      const { data: bookings, error } = await supabaseClient
        .from('bookings')
        .select(`
          *,
          profiles!bookings_user_id_fkey(full_name, email)
        `)
        .order('booking_date', { ascending: false });

      const tbody = document.getElementById('bookingsBody');

      if (error || !bookings || bookings.length === 0) {
        tbody.innerHTML = '<tr><td colspan="7" class="empty-state">No bookings found</td></tr>';
        return;
      }

      tbody.innerHTML = bookings.map(booking => `
        <tr>
          <td><strong>${booking.profiles?.full_name || 'Unknown'}</strong><br><small>${booking.profiles?.email}</small></td>
          <td>${booking.subject || 'N/A'}</td>
          <td>${booking.session_date ? new Date(booking.session_date).toLocaleDateString() : 'TBD'}</td>
          <td>${booking.session_time || 'TBD'}</td>
          <td>${booking.instructor_name || 'Not assigned'}</td>
          <td><span class="status-badge status-${booking.status}">${booking.status}</span></td>
          <td>
            <button class="btn-small btn-assign" onclick="showAssignTeacherModal('${booking.id}', '${booking.user_id}')">Assign</button>
            ${booking.status === 'scheduled' ? `<button class="btn-small btn-complete" onclick="markComplete('${booking.id}')">Complete</button>` : ''}
          </td>
        </tr>
      `).join('');
    }

    async function loadStudents() {
      const { data: students, error } = await supabaseClient
        .from('profiles')
        .select('*')
        .eq('role', 'student')
        .order('created_at', { ascending: false });

      const tbody = document.getElementById('studentsBody');

      if (error || !students || students.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="empty-state">No students found</td></tr>';
        return;
      }

      const { data: bookings } = await supabaseClient
        .from('bookings')
        .select('user_id');

      tbody.innerHTML = students.map(student => {
        const sessionCount = bookings?.filter(b => b.user_id === student.id).length || 0;

        return `
          <tr>
            <td><strong>${student.full_name}</strong></td>
            <td>${student.email}</td>
            <td>${student.phone || 'N/A'}</td>
            <td>${student.age_group || 'N/A'}</td>
            <td>${sessionCount}</td>
            <td>
              <button class="btn-small btn-assign" onclick="showAssignTeacherModal(null, '${student.id}')">Assign Teacher</button>
            </td>
          </tr>
        `;
      }).join('');
    }

    async function loadTeachers() {
      const { data: teachers, error } = await supabaseClient
        .from('profiles')
        .select('*')
        .eq('role', 'teacher')
        .order('created_at', { ascending: false });

      allTeachers = teachers || [];

      const tbody = document.getElementById('teachersBody');

      if (error || !teachers || teachers.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4" class="empty-state">No teachers found. Add your first teacher!</td></tr>';
        return;
      }

      const { data: assignments } = await supabaseClient
        .from('teacher_assignments')
        .select('teacher_id');

      tbody.innerHTML = teachers.map(teacher => {
        const studentCount = assignments?.filter(a => a.teacher_id === teacher.id).length || 0;

               return `
          <tr>
            <td><strong>${teacher.full_name}</strong></td>
            <td>${teacher.email}</td>
            <td>${teacher.phone || 'N/A'}</td>
            <td>${studentCount}</td>
          </tr>
        `;
      }).join('');
    }

    function showTab(tabName) {
      document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
      event.target.classList.add('active');

      document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
      document.getElementById(tabName + 'Tab').classList.add('active');
    }

    function showAssignTeacherModal(bookingId, studentId) {
      currentBookingId = bookingId;
      currentStudentId = studentId;

      const select = document.getElementById('teacherSelect');
      
      if (allTeachers.length === 0) {
        select.innerHTML = '<option value="">No teachers available. Add a teacher first.</option>';
      } else {
        select.innerHTML = '<option value="">Select a teacher...</option>' +
          allTeachers.map(t => `<option value="${t.id}">${t.full_name} (${t.email})</option>`).join('');
      }

      document.getElementById('assignTeacherModal').classList.add('active');
    }

    async function assignTeacher() {
      const teacherId = document.getElementById('teacherSelect').value;
      
      if (!teacherId) {
        alert('Please select a teacher');
        return;
      }

      const teacher = allTeachers.find(t => t.id === teacherId);

      if (currentBookingId) {
        const { error } = await supabaseClient
          .from('bookings')
          .update({
            assigned_teacher_id: teacherId,
            instructor_name: teacher.full_name
          })
          .eq('id', currentBookingId);

        if (error) {
          alert('Error: ' + error.message);
          return;
        }
      }

      const { error: assignError } = await supabaseClient
        .from('teacher_assignments')
        .upsert({
          teacher_id: teacherId,
          student_id: currentStudentId,
          assigned_by: (await supabaseClient.auth.getSession()).data.session.user.id
        }, {
          onConflict: 'teacher_id,student_id'
        });

      if (assignError) {
        alert('Error: ' + assignError.message);
        return;
      }

      alert('✅ Teacher assigned successfully!');
      closeModal('assignTeacherModal');
      loadBookings();
      loadStudents();
      loadTeachers();
    }

    async function markComplete(bookingId) {
      if (!confirm('Mark this session as completed?')) return;

      const { error } = await supabaseClient
        .from('bookings')
        .update({ status: 'completed' })
        .eq('id', bookingId);

      if (error) {
        alert('Error: ' + error.message);
      } else {
        alert('✅ Session marked as completed!');
        loadStats();
        loadBookings();
      }
    }

    function showAddTeacherModal() {
      document.getElementById('teacherName').value = '';
      document.getElementById('teacherEmail').value = '';
      document.getElementById('teacherPhone').value = '';
      document.getElementById('teacherPassword').value = '';
      document.getElementById('addTeacherModal').classList.add('active');
    }

    async function addTeacher() {
      const name = document.getElementById('teacherName').value;
      const email = document.getElementById('teacherEmail').value;
      const phone = document.getElementById('teacherPhone').value;
      const password = document.getElementById('teacherPassword').value;

      if (!name || !email || !password) {
        alert('Please fill in all required fields');
        return;
      }

      const { data: authData, error: authError } = await supabaseClient.auth.signUp({
        email,
        password,
      });

      if (authError) {
        alert('Error: ' + authError.message);
        return;
      }

      const { error: profileError } = await supabaseClient
        .from('profiles')
        .insert({
          id: authData.user.id,
          email,
          full_name: name,
          phone: phone || null,
          role: 'teacher'
        });

      if (profileError) {
        alert('Account created but profile failed: ' + profileError.message);
        return;
      }

      alert('✅ Teacher added successfully!');
      closeModal('addTeacherModal');
      loadStats();
      loadTeachers();
    }

    function closeModal(modalId) {
      document.getElementById(modalId).classList.remove('active');
    }

    async function logout() {
      await supabaseClient.auth.signOut();
      window.location.href = 'admin-login.html';
    }

    checkAdminAuth();
  </script>
</body>
</html>
